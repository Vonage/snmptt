def tag_name
pipeline {
  agent any

  stages {
    stage('get version') {
      agent {
        dockerfile {
          filename 'Dockerfile'
          dir './ci/'
          reuseNode true
        }
      }
      steps {
        script {
          def releaseList
          withCredentials([string(credentialsId: 'jfrileyiv-github-pat-only', variable: 'PAT')]) {
            sh 'echo ${PAT} | gh auth login --with-token'
            releaseList = sh("gh release list --repo Vonage/snmptt", returnStdout: true)
          }
          println("releaseList: " + releaseList)
          // tag_name = readJSON(text: release).tag_name
          // println("tag_name: " + tag_name)
        }
      }
    }
    stage('build') {
      agent {
        docker {
          image 'alectolytic/rpmbuilder:centos-7'
          reuseNode true
        }
      }
      steps {
        sh "ls -lR ./.git/refs/"
        sh "cat ./.git/refs/remotes/origin/master"
        // sh "./ci/scripts/package-snmptt.sh"
      }
    }

    // stage('push') {}
  }

  post {
    always {
      cleanWs(cleanWhenAborted: true,
              cleanWhenFailure: true,
              cleanWhenNotBuilt: true,
              cleanWhenSuccess: true,
              cleanWhenUnstable: true,
              deleteDirs: true,
              disableDeferredWipeout: true
      )
    }
  }
}
