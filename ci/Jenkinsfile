// Function Definitions

def verifyBuildSuccess(int buildScriptExitStatus) {
  return (buildScriptExitStatus == 0)
}

// Global Variable Declarations
def tag_name
def buildSucceeded
def packageName

// Pipeline

pipeline {
  agent any

  stages {
    stage('get version') {
      // version will be stored in the variable tag_name
      agent {
        dockerfile {
          filename 'Dockerfile.gh-cli'
          dir './ci/'
          reuseNode true
        }
      }
      steps {
        script {
          def releases
          def releaseList
          def latestReleaseString
          withCredentials([string(credentialsId: 'jfrileyiv-github-pat-only', variable: 'PAT')]) {
            sh 'echo ${PAT} | gh auth login --with-token'
            releases = sh(script: "gh release list --repo Vonage/snmptt", returnStdout: true)
          }
          releaseList = releases.split('\n')
          println("releaseList: ")
          for(release in releaseList) {
            if (release.toLowerCase().contains('latest')) {
              latestReleaseString = release
              break
            }
          }
          tag_name = latestReleaseString.split()[2]
          println("tag_name: " + tag_name)
        }
      }
    }
    stage('build') {
      agent {
        dockerfile {
          filename 'Dockerfile.rpm-builder'
          dir './ci/'
          reuseNode true
        }
      }
      steps {
        script{
          def buildScriptExitStatus = sh(script: "./ci/scripts/package-snmptt.sh ${tag_name}", returnStatus: true)
          buildSucceeded = verifyBuildSuccess(buildScriptExitStatus)
          println("buildSucceeded: " + buildSucceeded)
          if (!buildSucceeded) {
            error("Failed to build RPM Package")
          }
          else {
            packageName = sh(script: "ls package", returnStdout: true).trim()
          }
        }
        
      }
    }
    stage('push') {
      when {
        expression { buildSucceeded }
      }
      steps {
        echo "TO DO: Push Package to INFRA Sysrepo..."
        echo "packageName: ${packageName}"
        sh "stat ./package/${packageName}"
      }
    }
  }
  
  // post {
  //   always {
  //     cleanWs(cleanWhenAborted: true,
  //             cleanWhenFailure: true,
  //             cleanWhenNotBuilt: true,
  //             cleanWhenSuccess: true,
  //             cleanWhenUnstable: true,
  //             deleteDirs: true,
  //             disableDeferredWipeout: true
  //     )
  //   }
  // }
}
